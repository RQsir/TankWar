import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.*;

public class NetClient {

    public static int UDP_PORT_START = 2333;
    int udpPort;
    private TankClient tc;

    DatagramSocket ds = null;

    public NetClient(TankClient tc) {
        this.udpPort = UDP_PORT_START++;
        this.tc = tc;

        try {
            ds = new DatagramSocket(udpPort);
        } catch (SocketException e) {
            e.printStackTrace();
        }
    }

    public void connect(String IP, int port){

        Socket s = null;

        try {
            // Creates a stream socket and connects it to the specified port
            // number on the named host.
            s = new Socket(IP, port);

            // transfer client's udpPort to TankServer by tcp
            DataOutputStream dos = new DataOutputStream(s.getOutputStream());
            dos.writeInt(udpPort);

            // receive id generated by TankServer
            DataInputStream dis = new DataInputStream(s.getInputStream());
            int id;
            id = dis.readInt();
            tc.myTank.id = id;
System.out.println("Connected to server!"+"Addr-" + s.getInetAddress() + ":" + s.getPort() + ", and server gives me a id:" + id);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if(s != null){

                    s.close();
                    s = null;
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        new Thread(new UDPRecvThread()).start();

        send();
    }

    public void send(){

        TankNewMsg msg = new TankNewMsg(tc.myTank);
        msg.send("127.0.0.1", TankServer.UDP_PORT, ds);
    }

    private class UDPRecvThread implements Runnable{

        byte[] buf = new byte[1024];

        @Override
        public void run() {

            while(ds != null){

                DatagramPacket dp = new DatagramPacket(buf,buf.length);
                try {
                    ds.receive(dp);
                    parse(dp);
                } catch (IOException e) {
                    e.printStackTrace();
                }
System.out.println("receive a UDP packet from server");

            }
        }


        private void parse(DatagramPacket dp) {

            TankNewMsg msg = new TankNewMsg();
            msg.parse(dp);
        }

    }


}
